/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import React, { useEffect, useRef, useState } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import { type AnimationMixerExtended, type LipSync } from '../@types'
import { useChat } from '../hooks/useChat'
import { MessageToSend } from '../../types'
import { insertCaption } from '../../features/caption'

const AVATAR_FILE_PATH = '/models/657d84d7bfb427795ec76042.glb'
const ANIMATIONS_FILE_PATH = '/models/animations.glb'

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
}

const corresponding = {
  A: 'viseme_PP',
  B: 'viseme_kk',
  C: 'viseme_I',
  D: 'viseme_AA',
  E: 'viseme_O',
  F: 'viseme_U',
  G: 'viseme_FF',
  H: 'viseme_TH',
  X: 'viseme_PP',
} as const

type GLTFResult = GLTF & {
  nodes: {
    Hips: THREE.SkinnedMesh
    Wolf3D_Body: THREE.SkinnedMesh
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh
    Wolf3D_Outfit_Top: THREE.SkinnedMesh
    Wolf3D_Hair: THREE.SkinnedMesh
    EyeLeft: THREE.SkinnedMesh
    EyeRight: THREE.SkinnedMesh
    Wolf3D_Head: THREE.SkinnedMesh
    Wolf3D_Teeth: THREE.SkinnedMesh
  }
  materials: {
    Wolf3D_Body: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial
    Wolf3D_Hair: THREE.MeshStandardMaterial
    Wolf3D_Eye: THREE.MeshStandardMaterial
    Wolf3D_Skin: THREE.MeshStandardMaterial
    Wolf3D_Teeth: THREE.MeshStandardMaterial
  }
}

const lerpMorphTarget = (
  scene: THREE.Group,
  target: string,
  value: number,
  speed = 0.1
) => {
  scene.traverse((child: THREE.Object3D) => {
    const skinnedMesh = child as THREE.SkinnedMesh
    if (skinnedMesh.isSkinnedMesh && skinnedMesh.morphTargetDictionary) {
      const index = skinnedMesh.morphTargetDictionary[target]
      if (index != null && skinnedMesh.morphTargetInfluences) {
        skinnedMesh.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          skinnedMesh.morphTargetInfluences[index],
          value,
          speed
        )
      }
    }
  })
}

export const Avatar: React.FC = () => {
  const [lipSync, setLipSync] = useState<LipSync>()
  const { nodes, materials, scene } = useGLTF(AVATAR_FILE_PATH) as GLTFResult
  const { animations } = useGLTF(ANIMATIONS_FILE_PATH)
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === 'Idle') ? 'Idle' : animations[0].name // Check if Idle animation exists otherwise use first animation
  )
  const [audio, setAudio] = useState<HTMLAudioElement>(new Audio())
  const [blink, setBlink] = useState(false)
  const group = useRef<THREE.Group>()
  const { actions, mixer } = useAnimations(animations, group)
  const [facialExpression, setFacialExpression] =
    useState<keyof typeof facialExpressions>('default')
  const { setCaptionTexts, message, setMessage } = useChat()

  useEffect(() => {
    if (!message) {
      setAnimation('Idle')
      return
    }
    const {
      animation,
      facialExpression,
      lipSync,
      text: transcript,
      time,
      userId,
    } = message
    setAnimation(animation)
    setFacialExpression(facialExpression)
    setLipSync(lipSync)
    const audio = new Audio('data:audio/mp3;base64,' + message.audio)
    audio.addEventListener('ended', () =>
      setTimeout(() => setMessage(null), 1000)
    )
    audio.play()
    setAudio(audio)

    setCaptionTexts((prevs: MessageToSend[]) =>
      insertCaption(
        prevs,
        {
          transcript,
          time,
          userId,
        },
        true
      )
    )
  }, [message])

  useEffect(() => {
    const animationAction = actions[animation]
    const _mixer = mixer as AnimationMixerExtended
    if (animationAction != null) {
      animationAction
        .reset()
        .fadeIn(_mixer.stats.actions.inUse === 0 ? 0 : 0.5)
        .play()
    }
    return () => {
      if (animationAction != null) {
        animationAction.fadeOut(0.5)
      }
    }
  }, [animation])

  useFrame(() => {
    Object.keys(nodes.EyeLeft.morphTargetDictionary ?? {}).forEach((key) => {
      const mapping = facialExpressions[facialExpression]
      if (key === 'eyeBlinkLeft' || key === 'eyeBlinkRight') {
        return // eyes wink/blink are handled separately
      }
      const facialMapping = mapping as { [key: string]: number }
      if (facialMapping && facialMapping[key] != null) {
        lerpMorphTarget(scene, key, facialMapping[key], 0.1)
      } else {
        lerpMorphTarget(scene, key, 0, 0.1)
      }
    })

    lerpMorphTarget(scene, 'eyeBlinkLeft', blink ? 1 : 0, 0.5)
    lerpMorphTarget(scene, 'eyeBlinkRight', blink ? 1 : 0, 0.5)

    const appliedMorphTargets =
      [] as (typeof corresponding)[keyof typeof corresponding][]
    if (message && lipSync) {
      const currentAudioTime = audio.currentTime
      for (let i = 0; i < lipSync.mouthCues.length; i++) {
        const mouthCue = lipSync.mouthCues[i]
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value])
          lerpMorphTarget(scene, corresponding[mouthCue.value], 1, 0.2)
          break
        }
      }
    }

    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return
      }
      lerpMorphTarget(scene, value, 0, 0.1)
    })
  })

  useEffect(() => {
    let blinkTimeout: number | ReturnType<typeof setTimeout> = 0
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true)
        setTimeout(() => {
          setBlink(false)
          nextBlink()
        }, 200)
      }, THREE.MathUtils.randInt(1000, 5000))
    }
    nextBlink()
    return () => clearTimeout(blinkTimeout)
  }, [])

  return (
    <group ref={group as React.RefObject<THREE.Group>}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  )
}

useGLTF.preload(AVATAR_FILE_PATH)
useGLTF.preload(ANIMATIONS_FILE_PATH)
